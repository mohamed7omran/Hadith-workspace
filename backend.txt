### مكتب المحدث (Hadith Scholar's Office) - Technical Documentation



## 📋 Project Overview



**مكتب المحدث** is a comprehensive Arabic Hadith research and management platform designed for Islamic scholars, researchers, and students. The platform provides tools for hadith collection, analysis, authentication, narrator chain (isnad) management, and scholarly research project organization.



### 🎯 Core Purpose



- **Hadith Management**: Store, categorize, and analyze prophetic traditions

- **Isnad Analysis**: Visualize and study narrator chains for authenticity verification

- **Scholarly Research**: Organize research projects and collaborate on hadith studies

- **Digital Library**: Manage Islamic books with annotation capabilities

- **Academic Tools**: Advanced search, export, and citation features





---



## 🏗️ System Architecture Overview



### Frontend Stack



- **Framework**: Next.js 15 (App Router)

- **Language**: TypeScript

- **Styling**: Tailwind CSS + shadcn/ui components

- **State Management**: Redux Toolkit

- **Data Persistence**: localStorage (temporary) → Database (backend needed)

- **Internationalization**: Arabic RTL support





### Backend Requirements (To Be Implemented)



- **Database**: PostgreSQL or MongoDB

- **Authentication**: JWT-based user management

- **File Storage**: Cloud storage for PDF books and media

- **Search Engine**: Elasticsearch for advanced Arabic text search

- **API**: RESTful API with GraphQL consideration





---



## 📱 Page Structure & Functionality



### 1. **Homepage** (`/`)



**Purpose**: Dashboard and overview of platform activities



**Features**:



- Welcome message with Islamic quote

- Statistics cards (total hadiths, narrators, active projects, completion rate)

- Recent hadiths preview

- Active projects summary

- Quick search functionality

- Quick action buttons





**Backend Needs**:



- Dashboard analytics API

- Recent activity tracking

- User-specific statistics





### 2. **Hadiths Management** (`/ahadith`)



**Purpose**: Main hadith collection and management interface



**Features**:



- Hadith listing with pagination

- Grade-based filtering (صحيح، حسن، ضعيف، موضوع)

- Real-time search functionality

- Hadith cards with preview and actions

- Individual hadith CRUD operations

- Export functionality

**Backend Needs**:

-- Hadiths table structure

CREATE TABLE hadiths (

    id UUID PRIMARY KEY,

    arabic_text TEXT NOT NULL,

    narrator VARCHAR(255) NOT NULL,

    grade ENUM('صحيح', 'حسن', 'ضعيف', 'موضوع') NOT NULL,

    analysis_notes TEXT,

    created_at TIMESTAMP DEFAULT NOW(),

    updated_at TIMESTAMP DEFAULT NOW(),

    user_id UUID REFERENCES users(id)

);

### مكتب المحدث (Hadith Scholar's Office) - Technical Documentation



## 📋 Project Overview



**مكتب المحدث** is a comprehensive Arabic Hadith research and management platform designed for Islamic scholars, researchers, and students. The platform provides tools for hadith collection, analysis, authentication, narrator chain (isnad) management, and scholarly research project organization.



### 🎯 Core Purpose



- **Hadith Management**: Store, categorize, and analyze prophetic traditions

- **Isnad Analysis**: Visualize and study narrator chains for authenticity verification

- **Scholarly Research**: Organize research projects and collaborate on hadith studies

- **Digital Library**: Manage Islamic books with annotation capabilities

- **Academic Tools**: Advanced search, export, and citation features





---



## 🏗️ System Architecture Overview



### Frontend Stack



- **Framework**: Next.js 15 (App Router)

- **Language**: TypeScript

- **Styling**: Tailwind CSS + shadcn/ui components

- **State Management**: Redux Toolkit

- **Data Persistence**: localStorage (temporary) → Database (backend needed)

- **Internationalization**: Arabic RTL support





### Backend Requirements (To Be Implemented)



- **Database**: PostgreSQL or MongoDB

- **Authentication**: JWT-based user management

- **File Storage**: Cloud storage for PDF books and media

- **Search Engine**: Elasticsearch for advanced Arabic text search

- **API**: RESTful API with GraphQL consideration





---



## 📱 Page Structure & Functionality



### 1. **Homepage** (`/`)



**Purpose**: Dashboard and overview of platform activities



**Features**:



- Welcome message with Islamic quote

- Statistics cards (total hadiths, narrators, active projects, completion rate)

- Recent hadiths preview

- Active projects summary

- Quick search functionality

- Quick action buttons





**Backend Needs**:



- Dashboard analytics API

- Recent activity tracking

- User-specific statistics





### 2. **Hadiths Management** (`/ahadith`)



**Purpose**: Main hadith collection and management interface



**Features**:



- Hadith listing with pagination

- Grade-based filtering (صحيح، حسن، ضعيف، موضوع)

- Real-time search functionality

- Hadith cards with preview and actions

- Individual hadith CRUD operations

- Export functionality





**Backend Needs**:



```sql

-- Hadiths table structure

CREATE TABLE hadiths (

    id UUID PRIMARY KEY,

    arabic_text TEXT NOT NULL,

    narrator VARCHAR(255) NOT NULL,

    grade ENUM('صحيح', 'حسن', 'ضعيف', 'موضوع') NOT NULL,

    analysis_notes TEXT,

    created_at TIMESTAMP DEFAULT NOW(),

    updated_at TIMESTAMP DEFAULT NOW(),

    user_id UUID REFERENCES users(id)

);

```



### 3. **Hadith Detail Page** (`/ahadith/[id]`)



**Purpose**: Comprehensive view of individual hadith with full analysis



**Features**:



- Complete hadith text display

- Tabbed interface (Overview, Isnad, References, Scholar Comments)

- Interactive narrator chain visualization

- Reference management

- Scholar opinions and grades

- Export to PDF functionality

- Edit and delete capabilities

- Related hadiths suggestions





**Backend Needs**:



- Detailed hadith retrieval API

- Related content algorithms

- PDF generation service





### 4. **Isnad Management** (`/isnads`)



**Purpose**: Narrator chain analysis and visualization



**Features**:



- Visual narrator chain display

- Isnad authenticity grading

- Narrator reliability assessment

- Chain editing capabilities

- Export individual isnads

- Search by narrator names





**Backend Needs**:

-- Isnads and Narrators tables

CREATE TABLE isnads (

    id UUID PRIMARY KEY,

    hadith_id UUID REFERENCES hadiths(id),

    grade ENUM('صحيح', 'حسن', 'ضعيف', 'موضوع'),

    notes TEXT,

    created_at TIMESTAMP DEFAULT NOW()

);



CREATE TABLE narrators (

    id UUID PRIMARY KEY,

    name VARCHAR(255) NOT NULL,

    full_name VARCHAR(500),

    birth_year INTEGER,

    death_year INTEGER,

    reliability_grade VARCHAR(100),

    biography TEXT,

    created_at TIMESTAMP DEFAULT NOW()

);



CREATE TABLE isnad_narrators (

    id UUID PRIMARY KEY,

    isnad_id UUID REFERENCES isnads(id),

    narrator_id UUID REFERENCES narrators(id),

    position_in_chain INTEGER NOT NULL,

    reliability_notes TEXT

);

### 5. **Narrators Database** (`/narrators`)



**Purpose**: Comprehensive narrator biography and reliability database



**Features**:



- Narrator profiles with biographical information

- Reliability grading system

- Hadith count per narrator

- Life span information (Hijri dates)

- Search and filtering capabilities





**Backend Needs**:

Narrator CRUD operations

Hadith count aggregation

Advanced search with Arabic text support

### 6. **Analysis & Takhrij** (`/analysis`)

**Purpose**: Hadith authentication and scholarly analysis tools



**Features**:



- Hadith text input and analysis

- Narrator chain builder

- Reference management system

- Scholar comment collection

- Grade assignment with justification

- Automated hadith addition to database





**Backend Needs**:

Complex form processing

Multi-step data validation

Automated hadith classification

### 7. **Books Library** (`/books`)

**Purpose**: Digital Islamic library with annotation capabilities

**Features**:



- PDF and text file upload

- Reading progress tracking

- Note-taking system with categories (general, benefit, commentary)

- Text selection and annotation

- Export notes functionality

- Search within books





**Backend Needs**:

-- Books and Notes tables

CREATE TABLE books (

    id UUID PRIMARY KEY,

    title VARCHAR(500) NOT NULL,

    author VARCHAR(255),

    file_name VARCHAR(255) NOT NULL,

    file_type ENUM('pdf', 'text') NOT NULL,

    file_path VARCHAR(500) NOT NULL,

    total_pages INTEGER,

    uploaded_at TIMESTAMP DEFAULT NOW(),

    user_id UUID REFERENCES users(id)

);



CREATE TABLE book_notes (

    id UUID PRIMARY KEY,

    book_id UUID REFERENCES books(id),

    user_id UUID REFERENCES users(id),

    text TEXT NOT NULL,

    selected_text TEXT,

    category ENUM('general', 'benefit', 'commentary'),

    page_number INTEGER,

    created_at TIMESTAMP DEFAULT NOW(),

    updated_at TIMESTAMP DEFAULT NOW()

);



CREATE TABLE reading_progress (

    id UUID PRIMARY KEY,

    book_id UUID REFERENCES books(id),

    user_id UUID REFERENCES users(id),

    current_page INTEGER DEFAULT 1,

    progress_percentage INTEGER DEFAULT 0,

    last_read_at TIMESTAMP DEFAULT NOW()

);

### 8. **Project Management** (`/projects`)



**Purpose**: Research project organization and collaboration



**Features**:



- Project creation and management

- Progress tracking with visual indicators

- Deadline management

- Hadith count per project

- Project status (active, completed, archived)

- Team collaboration features





**Backend Needs**:

-- Projects table

CREATE TABLE projects (

    id UUID PRIMARY KEY,

    title VARCHAR(500) NOT NULL,

    description TEXT,

    type VARCHAR(100), -- تخريج، دراسة أسانيد، تحقيق، etc.

    status ENUM('active', 'completed', 'archived') DEFAULT 'active',

    progress_percentage INTEGER DEFAULT 0,

    deadline DATE,

    created_by UUID REFERENCES users(id),

    created_at TIMESTAMP DEFAULT NOW(),

    updated_at TIMESTAMP DEFAULT NOW()

);



CREATE TABLE project_hadiths (

    id UUID PRIMARY KEY,

    project_id UUID REFERENCES projects(id),

    hadith_id UUID REFERENCES hadiths(id),

    added_at TIMESTAMP DEFAULT NOW()

);

### 9. **Advanced Search** (`/search`)

**Purpose**: Comprehensive search across all platform content



**Features**:



- Multi-criteria search (text, narrator, source, grade)

- Boolean search operators

- Filter by hadith grade, source, scholar opinion

- Search result export

- Search history





**Backend Needs**:

Elasticsearch integration

Arabic text indexing

Complex query processing

Search analytics

### 10. **Sources & References** (`/sources`)



**Purpose**: Management of hadith sources and external references



**Features**:



- Source database (books, websites, databases)

- Reference linking to hadiths

- External URL management

- Source reliability assessment





**Backend Needs**:

-- Sources and References tables

CREATE TABLE sources (

    id UUID PRIMARY KEY,

    title VARCHAR(500) NOT NULL,

    author VARCHAR(255),

    type ENUM('book', 'website', 'database') NOT NULL,

    url VARCHAR(500),

    reliability_grade VARCHAR(100),

    description TEXT,

    created_at TIMESTAMP DEFAULT NOW()

);



CREATE TABLE hadith_references (

    id UUID PRIMARY KEY,

    hadith_id UUID REFERENCES hadiths(id),

    source_id UUID REFERENCES sources(id),

    volume VARCHAR(50),

    page VARCHAR(50),

    hadith_number VARCHAR(50),

    notes TEXT

);

### 11. **Settings** (`/settings`)



**Purpose**: User preferences and system configuration



**Features**:



- Display preferences (Arabic text rendering, date formats)

- Search settings

- Export format preferences

- Notification settings

- Theme selection

##  Core Components & Their Roles



### 1. **Header Component**



- **Purpose**: Main navigation and user interface

- **Features**: Responsive navigation menu, theme toggle, user authentication

- **Backend Integration**: User session management, role-based menu items





### 2. **Hadith Card Component**



- **Purpose**: Display hadith summary in lists

- **Features**: Text preview, grade badges, action buttons, expandable details

- **Backend Integration**: Hadith data fetching, real-time updates





### 3. **Isnad Visualization Component**



- **Purpose**: Visual representation of narrator chains

- **Features**: Interactive narrator nodes, chain validation, visual grading

- **Backend Integration**: Narrator data, chain validation algorithms





### 4. **Search Components**



- **Purpose**: Advanced search functionality

- **Features**: Auto-complete, filter panels, result highlighting

- **Backend Integration**: Search API, indexing service





### 5. **Book Reader Component**



- **Purpose**: PDF and text reading interface

- **Features**: Page navigation, text selection, annotation tools

- **Backend Integration**: File serving, progress tracking, note synchronization

## 📊 Data Models & Relationships



### Core Entities Relationship Diagram:

Users (1) ←→ (M) Hadiths

Hadiths (1) ←→ (1) Isnads

Isnads (1) ←→ (M) Isnad_Narrators ←→ (M) Narrators

Hadiths (1) ←→ (M) Hadith_References ←→ (M) Sources

Hadiths (1) ←→ (M) Scholar_Comments

Users (1) ←→ (M) Projects ←→ (M) Project_Hadiths ←→ (M) Hadiths

Users (1) ←→ (M) Books ←→ (M) Book_Notes

Users (1) ←→ (M) Reading_Progress

### Additional Tables Needed:

-- User management

CREATE TABLE users (

    id UUID PRIMARY KEY,

    username VARCHAR(100) UNIQUE NOT NULL,

    email VARCHAR(255) UNIQUE NOT NULL,

    password_hash VARCHAR(255) NOT NULL,

    full_name VARCHAR(255),

    role ENUM('admin', 'scholar', 'student') DEFAULT 'student',

    created_at TIMESTAMP DEFAULT NOW(),

    last_login TIMESTAMP

);



-- Scholar comments

CREATE TABLE scholar_comments (

    id UUID PRIMARY KEY,

    hadith_id UUID REFERENCES hadiths(id),

    scholar_name VARCHAR(255) NOT NULL,

    comment TEXT NOT NULL,

    grade VARCHAR(100),

    source VARCHAR(255),

    created_at TIMESTAMP DEFAULT NOW()

);



-- Search history

CREATE TABLE search_history (

    id UUID PRIMARY KEY,

    user_id UUID REFERENCES users(id),

    query TEXT NOT NULL,

    filters JSONB,

    results_count INTEGER,

    searched_at TIMESTAMP DEFAULT NOW()

);

## 🔐 Authentication & Authorization



### User Roles:



1. **Admin**: Full system access, user management, content moderation

2. **Scholar**: Advanced features, project management, content creation

3. **Student**: Basic access, personal notes, limited editing

##  Export & Integration Features



### Export Formats:



1. **PDF**: Formatted hadith collections with proper Arabic typography

2. **Word**: Editable documents for further research

3. **JSON**: Data exchange format

4. **CSV**: Spreadsheet-compatible format

5. **BibTeX**: Academic citation format





### API Integration Points:



1. **External Hadith Databases**: Import/sync with major hadith collections

2. **Academic Platforms**: Export citations to reference managers

3. **Social Sharing**: Share hadiths on social media with proper formatting

4. **Backup Services**: Automated data backup to cloud storage





---



## 🚀 Performance & Scalability Considerations



### Database Optimization:



- **Indexing**: Full-text search indexes on Arabic content

- **Partitioning**: Large hadith collections by source or date

- **Caching**: Redis for frequently accessed data

- **CDN**: Static assets and file storage





### API Performance:



- **Pagination**: Efficient large dataset handling

- **Rate Limiting**: Prevent abuse and ensure fair usage

- **Compression**: Gzip responses for faster data transfer

- **Monitoring**: Performance metrics and error tracking